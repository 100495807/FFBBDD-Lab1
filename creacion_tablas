DROP TABLE review CASCADE CONSTRAINTS;
DROP TABLE pedidoArticuloCliente CASCADE CONSTRAINTS;
DROP TABLE pedidoCliente CASCADE CONSTRAINTS;
DROP TABLE tarjetaCliente CASCADE CONSTRAINTS;
DROP TABLE direccionCliente CASCADE CONSTRAINTS;
DROP TABLE registrado CASCADE CONSTRAINTS;
DROP TABLE direccion CASCADE CONSTRAINTS;
DROP TABLE descuento CASCADE CONSTRAINTS;
DROP TABLE tarjetaCredito CASCADE CONSTRAINTS;
DROP TABLE proveedorArticulo CASCADE CONSTRAINTS;
DROP TABLE pedidosProveedor CASCADE CONSTRAINTS;
DROP TABLE proveedor CASCADE CONSTRAINTS;
DROP TABLE articulo CASCADE CONSTRAINTS;
DROP TABLE formatoProducto CASCADE CONSTRAINTS;
DROP TABLE cantidad CASCADE CONSTRAINTS;
DROP TABLE producto CASCADE CONSTRAINTS;
DROP SEQUENCE secDireccion;



--BIEN
CREATE TABLE producto (         
    nombre      VARCHAR2 (50),
    coffea      VARCHAR2 (50) NOT NULL,
    varietal    VARCHAR2 (50) NOT NULL, ------etc
    origen      VARCHAR2 (50) NOT NULL,
    tostado     CHAR(10) NOT NULL,
    cafeina     CHAR(12) NOT NULL,            --yes/no
    CONSTRAINT pk_producto PRIMARY KEY (nombre),
    CONSTRAINT ck_producto_cafeina CHECK (cafeina IN ('yes','no')),
    CONSTRAINT ck_producto_tostado CHECK (tostado IN ('natural', 'high-roast', 'blend'))
);


--BIEN
CREATE TABLE cantidad (
    packaging   VARCHAR2(50),
    cantidad    VARCHAR2(50),
    magnitud    VARCHAR2(50),
    CONSTRAINT pk_cantidad PRIMARY KEY(packaging, cantidad, magnitud)
);


--BIEN
CREATE TABLE formatoProducto (
    idProducto     VARCHAR2(50) NOT NULL,
    formato         CHAR(20) NOT NULL,
    packaging     VARCHAR2(50) NOT NULL,
    cantidad       VARCHAR2(50) NOT NULL,
    magnitud        VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_formatoProducto_idProducto FOREIGN KEY(idProducto) REFERENCES producto(nombre) ON DELETE CASCADE,
    CONSTRAINT fk_formatoProducto_cantidad FOREIGN KEY(packaging, cantidad, magnitud) REFERENCES cantidad(packaging, cantidad, magnitud) ON DELETE CASCADE,
    CONSTRAINT ck_formato CHECK (formato IN ('raw bean', 'roasted bean', 'ground', 'freeze-dried', 'capsules', 'prepared'))--PONER TILDE EN CAPSULA
);

--BIEN
CREATE TABLE articulo (
    idCodigo    CHAR(15),
    packaging   VARCHAR(50) NOT NULL,
    cantidad    VARCHAR2(50) NOT NULL,
    magnitud    VARCHAR2(50) NOT NULL,
    pvp         VARCHAR2(50) NOT NULL,
    stock       NUMBER(6) NOT NULL,
    producto    VARCHAR2(50) NOT NULL,
    stockMin    NUMBER(6) NOT NULL,
    stockMax    NUMBER(6) NOT NULL,
    CONSTRAINT pk_articulo PRIMARY KEY(idCodigo),
    CONSTRAINT fk_articulo_cantidad FOREIGN KEY(packaging, cantidad, magnitud) REFERENCES cantidad(packaging, cantidad, magnitud) ON DELETE CASCADE,
    CONSTRAINT fk_articulo_producto FOREIGN KEY(producto) REFERENCES producto(nombre) ON DELETE CASCADE,
    CONSTRAINT ck_articulo_stockMin CHECK (stockMin>5),
    CONSTRAINT ck_articulo_stockMax CHECK (stockMax>10)
);

--BIEN
CREATE TABLE proveedor (
    cif             CHAR(10), --chequear cuantos digitos tiene el char del cif
    nombreComercio  VARCHAR2(50) NOT NULL,
    correo          VARCHAR2(60) NOT NULL,
    telefono        VARCHAR2(50) NOT NULL,
    CuentaBanco    VARCHAR2(50) NOT NULL,                          
    DireccionPostal  VARCHAR2(200) NOT NULL,
    pais            VARCHAR2(50) NOT NULL,
    tiempoMedio     VARCHAR2(50),
    numPedido       VARCHAR2(50),
    persona         VARCHAR2(90) NOT NULL,
    CONSTRAINT pk_proveedor PRIMARY KEY(cif),
    CONSTRAINT uk_proveedor_nombreComercio UNIQUE (nombreComercio),
    CONSTRAINT uk_proveedor_correo UNIQUE (correo),
    CONSTRAINT uk_proveedor_telefono UNIQUE (telefono),
    CONSTRAINT uk_proveedor_CuentaBanco UNIQUE (CuentaBanco),
    CONSTRAINT uk_proveedor_Direccion_Postal UNIQUE (DireccionPostal)
);

--BIEN
CREATE TABLE pedidosProveedor ( 
    proveedor           CHAR(10) NOT NULL,
    cantidadUnidad      VARCHAR2(50) NOT NULL,
    fechaHora           DATE NOT NULL,
    estado              VARCHAR2(20) NOT NULL,
    articulo            CHAR(15) NOT NULL,
    costePedidoTotal    VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_pedidosProveedor PRIMARY KEY(proveedor),
    CONSTRAINT fk_pedidosProveedor_proveedor FOREIGN KEY(proveedor) REFERENCES proveedor(cif) ON DELETE SET NULL,
    CONSTRAINT fk_pedidosProveedor_articulo FOREIGN KEY(articulo) REFERENCES articulo(idCodigo), --oracle no poner nada es DNA o UNA
    CONSTRAINT ck_pedidosProveedor_estado CHECK (estado IN ('draft', 'placed', 'fulfilled'))
);

--BIEN
CREATE TABLE proveedorArticulo (
    idArticulo      CHAR(15) NOT NULL,
    idProveedor     CHAR(10) NOT NULL,
    coste           CHAR(12) NOT NULL,
    CONSTRAINT fk_proveedorArticulo_idArticulo FOREIGN KEY(idArticulo) REFERENCES articulo(idCodigo) ON DELETE CASCADE,
    CONSTRAINT fk_proveedorArticulo_idProveedor FOREIGN KEY(idProveedor) REFERENCES proveedor(cif) ON DELETE CASCADE
);

--BIEN
CREATE TABLE tarjetaCredito (
    numTarjeta      VARCHAR2(50),
    titular         VARCHAR2(50) NOT NULL,
    company         VARCHAR2(50) NOT NULL,
    caducidadMes       VARCHAR2(50) NOT NULL,
    caducidadYear      VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_tarjetaCredito PRIMARY KEY(numTarjeta)
);

--BIEN
CREATE TABLE descuento (
    porcentaje          VARCHAR2(50),
    fecha               DATE,
    CONSTRAINT pk_descuento PRIMARY KEY(porcentaje)
);

--BIEN
CREATE TABLE direccion (
    idDireccion     NUMBER(10),
    tipoVia         CHAR(10) NOT NULL,
    nombreVia       CHAR(30) NOT NULL,
    numInmueble     CHAR(3) NOT NULL,
    numBloque       CHAR(1),
    escalera        CHAR(2),
    piso            CHAR(7),
    puerta          CHAR(2),
    codigoPostal    CHAR(5) NOT NULL,
    ciudad          CHAR(45) NOT NULL,
    pais            CHAR(45) NOT NULL,
    CONSTRAINT pk_direccion PRIMARY KEY(idDireccion)
);



--BIEN
CREATE TABLE registrado (
    usuario                 VARCHAR2(50),
    contrasena              VARCHAR2(50) NOT NULL,         
    fechaHoraRegistro       DATE NOT NULL,
    preferenciaContacto     CHAR(30),
    porcentaje              VARCHAR2(50),
    CONSTRAINT pk_registrado_usuario PRIMARY KEY(usuario),
    CONSTRAINT fk_registrado_bonoDescuento FOREIGN KEY(porcentaje) REFERENCES descuento(porcentaje),
    CONSTRAINT ck_registrado_preferenciaContacto CHECK (preferenciaContacto IN 
    ('correo', 'llamada telefÃ³nica', 'sms', 'whatsapp', 'facebook', 'wechat', 'qqmobile', 'snapchat', 'telegram'))
);


CREATE TABLE direccionCliente (
    idCliente    VARCHAR2(50),
    idDireccion  NUMBER(10),
    CONSTRAINT fk_direccionCliente_idCliente FOREIGN KEY(idCliente) REFERENCES registrado(usuario),
    CONSTRAINT fk_direccionCliente_idDireccion FOREIGN KEY(idDireccion) REFERENCES direccion(idDireccion)
);

CREATE TABLE tarjetaCliente(
    numTarjeta VARCHAR2(30),
    idCliente VARCHAR2(50),
    CONSTRAINT fk_tarjetaCliente_numTarjeta FOREIGN KEY (numTarjeta) REFERENCES tarjetaCredito(numTarjeta),
    CONSTRAINT fk_tarjetaCliente_idCliente FOREIGN KEY (idCliente) REFERENCES registrado(usuario)
);

--BIEN
CREATE TABLE pedidoCliente (
    idPedido            NUMBER(10), --
    correo              VARCHAR2(70), --
    telefono            VARCHAR2(50), --
    nombre              VARCHAR2(50) NOT NULL, -- 
    apellido1           VARCHAR2(50) NOT NULL, --
    apellido2           VARCHAR2(50),
    fecha               DATE NOT NULL,
    fechaHoraPago       DATE NOT NULL,
    tarjeta             VARCHAR2(20) NOT NULL,
    fechaHoraEntrega    DATE NOT NULL,
    precioTotal         VARCHAR2(50) NOT NULL,
    tipoPago            CHAR(15) NOT NULL,
    direccion           NUMBER(10) NOT NULL,
    CONSTRAINT pk_pedidoCliente PRIMARY KEY(idPedido),
    CONSTRAINT fk_pedidoCliente_direccion FOREIGN KEY(direccion) REFERENCES direccion(idDireccion),
    CONSTRAINT fk_pedidoCliente_tarjeta FOREIGN KEY(tarjeta) REFERENCES tarjetaCredito(numTarjeta),
    CONSTRAINT ck_pedidoCliente_tipoPago CHECK(tipoPago IN ('credit card', 'bank transfer', 'COD')),
    CONSTRAINT ck_cliente_correOtel CHECK (correo IS NOT NULL OR telefono IS NOT NULL)
);

CREATE TABLE pedidoArticuloCliente (
    idArticulo      CHAR(15) NOT NULL,
    idClienteReg    VARCHAR2(50),
    cantidad        VARCHAR2(50) NOT NULL,
    idPedido        NUMBER(10),
    CONSTRAINT fk_pedidoArticuloCliente_idPedido FOREIGN KEY(idPedido) REFERENCES pedidoCliente(idPedido),
    CONSTRAINT fk_pedidoArticuloCliente_idArticulo FOREIGN KEY(idArticulo) REFERENCES articulo(idCodigo),
    CONSTRAINT fk_pedidoArticuloCliente_idClienteReg FOREIGN KEY(idClienteReg) REFERENCES registrado(usuario),
    CONSTRAINT ck_pedidoArticuloCliente_cantidad CHECK(cantidad>0)
);



CREATE TABLE  review(
    fechaHora       DATE,            --si se borra el usuario registrado se adjudica la review a un usuario creado que se llama anonimo o se elimina la review directamente
    usuario         VARCHAR2(50),   
    producto        VARCHAR2(50) NOT NULL,
    articulo        CHAR(15),
    puntuacion      VARCHAR2(2) NOT NULL,
    titulo          VARCHAR2(50),
    texto           VARCHAR2(3000),
    meGusta         VARCHAR2(10)  NOT NULL,
    refrenda        VARCHAR2(4),
    CONSTRAINT pk_review PRIMARY KEY(titulo, texto, fechaHora),
    CONSTRAINT fk_review_usuario FOREIGN KEY(usuario) REFERENCES registrado(usuario) ON DELETE SET NULL, --seria SET DEAFUALT pero no existe en oracle
    CONSTRAINT fk_review_articulo FOREIGN KEY(articulo) REFERENCES articulo(idCodigo) ON DELETE CASCADE,
    CONSTRAINT fk_review_producto FOREIGN KEY(producto) REFERENCES producto(nombre) ON DELETE CASCADE,
    CONSTRAINT ck_review_puntuacion CHECK(puntuacion BETWEEN 0 AND 6),
    CONSTRAINT ck_review_meGusta CHECK(meGusta BETWEEN 0 AND 1000000000)
);



CREATE SEQUENCE secDireccion START WITH 1 INCREMENT BY 1 NOCACHE;


--tabla formato borrada actualizar draw.io
--crear tabla nn de descuentoCliente pq sino dificil identificar sera tipo descuentoCliente(usuario,descuento)

